/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/worker-dom/dist/worker.mjs":
/*!*************************************************!*\
  !*** ./node_modules/worker-dom/dist/worker.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nvar WorkerThread = (function (exports) {\n    'use strict';\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    let count = 0;\n    let transfer = [];\n    const mapping = new Map();\n    /**\n     * Stores a node in mapping, and makes the index available on the Node directly.\n     * @param node Node to store and modify with index\n     * @return index Node was stored with in mapping\n     */\n\n    function store(node) {\n      if (node._index_ !== undefined) {\n        return node._index_;\n      }\n\n      mapping.set(node._index_ = ++count, node);\n      transfer.push(node);\n      return count;\n    }\n    /**\n     * Retrieves a node based on an index.\n     * @param index location in map to retrieve a Node for\n     * @return either the Node represented in index position, or null if not available.\n     */\n\n    function get(index) {\n      // mapping has a 1 based index, since on first store we ++count before storing.\n      return !!index && mapping.get(index) || null;\n    }\n    /**\n     * Returns nodes registered but not yet transferred.\n     * Side effect: Resets the transfer array to default value, to prevent passing the same values multiple times.\n     */\n\n    function consume() {\n      const copy = transfer;\n      transfer = [];\n      return copy;\n    }\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    const toLower = string => string.toLowerCase();\n    const keyValueString = (key, value) => `${key}=\"${value}\"`;\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    const observers = [];\n    let pendingMutations = false;\n\n    const match = (observerTarget, target) => observerTarget !== null && target._index_ === observerTarget._index_;\n\n    const pushMutation = (observer, record) => {\n      observer.pushRecord(record);\n\n      if (!pendingMutations) {\n        pendingMutations = true;\n        Promise.resolve().then(() => {\n          pendingMutations = false;\n          observers.forEach(observer => observer.callback(observer.takeRecords()));\n        });\n      }\n    };\n    /**\n     * When DOM mutations occur, Nodes will call this method with MutationRecords\n     * These records are then pushed into MutationObserver instances that match the MutationRecord.target\n     * @param record MutationRecord to push into MutationObservers.\n     */\n\n\n    function mutate(record) {\n      observers.forEach(observer => {\n        if (!observer.options.subtreeFlattened || record.type === 4\n        /* COMMAND */\n        ) {\n            pushMutation(observer, record);\n            return;\n          }\n\n        let target = record.target;\n        let matched = match(observer.target, target);\n\n        if (!matched) {\n          do {\n            if (matched = match(observer.target, target)) {\n              pushMutation(observer, record);\n              break;\n            }\n          } while (target = target.parentNode);\n        }\n      });\n    }\n    class MutationObserver {\n      constructor(callback) {\n        this._records_ = [];\n        this.callback = callback;\n      }\n      /**\n       * Register the MutationObserver instance to observe a Nodes mutations.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\n       * @param target Node to observe DOM mutations\n       */\n\n\n      observe(target, options) {\n        this.disconnect();\n        this.target = target;\n        this.options = Object.assign({\n          subtreeFlattened: false\n        }, options);\n        observers.push(this);\n      }\n      /**\n       * Stop the MutationObserver instance from observing a Nodes mutations.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\n       */\n\n\n      disconnect() {\n        this.target = null;\n        const index = observers.indexOf(this);\n\n        if (index >= 0) {\n          observers.splice(index, 1);\n        }\n      }\n      /**\n       * Empties the MutationObserver instance's record queue and returns what was in there.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\n       * @return Mutation Records stored on this MutationObserver instance.\n       */\n\n\n      takeRecords() {\n        return this._records_.splice(0, this._records_.length);\n      }\n      /**\n       * NOTE: This method doesn't exist on native MutationObserver.\n       * @param record MutationRecord to store for this instance.\n       */\n\n\n      pushRecord(record) {\n        this._records_.push(record);\n      }\n\n    }\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    let count$1 = 0;\n    let transfer$1 = [];\n    const mapping$1 = new Map();\n    /**\n     * Stores a string in mapping and returns the index of the location.\n     * @param value string to store\n     * @return location in map\n     */\n\n    function store$1(value) {\n      if (mapping$1.has(value)) {\n        // Safe to cast since we verified the mapping contains the value\n        return mapping$1.get(value);\n      }\n\n      mapping$1.set(value, ++count$1);\n      transfer$1.push(value);\n      return count$1;\n    }\n    /**\n     * Returns strings registered but not yet transferred.\n     * Side effect: Resets the transfer array to default value, to prevent passing the same values multiple times.\n     */\n\n    function consume$1() {\n      const strings = transfer$1;\n      transfer$1 = [];\n      return strings;\n    }\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    let globalDocument = null;\n    /**\n     * Propagates a property change for a Node to itself and all childNodes.\n     * @param node Node to start applying change to\n     * @param property Property to modify\n     * @param value New value to apply\n     */\n\n    const propagate = (node, property, value) => {\n      node[property] = value;\n      node.childNodes.forEach(child => propagate(child, property, value));\n    }; // https://developer.mozilla.org/en-US/docs/Web/API/Node\n    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget\n    //\n    // Please note, in this implmentation Node doesn't extend EventTarget.\n    // This is intentional to reduce the number of classes.\n\n\n    class Node {\n      constructor(nodeType, nodeName) {\n        this.childNodes = [];\n        this.parentNode = null;\n        this.isConnected = false;\n        this._handlers_ = {};\n        this.nodeType = nodeType;\n        this.nodeName = nodeName; // The first Node created is the global document.\n\n        if (globalDocument === null) {\n          globalDocument = this;\n        }\n\n        this.ownerDocument = globalDocument;\n        this._index_ = store(this);\n      } // Unimplemented Properties\n      // Node.baseURI – https://developer.mozilla.org/en-US/docs/Web/API/Node/baseURI\n      // Unimplemented Methods\n      // Node.compareDocumentPosition() – https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n      // Node.getRootNode() – https://developer.mozilla.org/en-US/docs/Web/API/Node/getRootNode\n      // Node.isDefaultNamespace() – https://developer.mozilla.org/en-US/docs/Web/API/Node/isDefaultNamespace\n      // Node.isEqualNode() – https://developer.mozilla.org/en-US/docs/Web/API/Node/isEqualNode\n      // Node.isSameNode() – https://developer.mozilla.org/en-US/docs/Web/API/Node/isSameNode\n      // Node.lookupPrefix() – https://developer.mozilla.org/en-US/docs/Web/API/Node/lookupPrefix\n      // Node.lookupNamespaceURI() – https://developer.mozilla.org/en-US/docs/Web/API/Node/lookupNamespaceURI\n      // Node.normalize() – https://developer.mozilla.org/en-US/docs/Web/API/Node/normalize\n      // Implemented at Element/Text layer\n      // Node.nodeValue – https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeValue\n      // Node.cloneNode – https://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode\n\n      /**\n       * Getter returning the text representation of Element.childNodes.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent\n       * @return text from all childNodes.\n       */\n\n\n      get textContent() {\n        let textContent = '';\n        const childNodes = this.childNodes;\n\n        if (childNodes.length) {\n          childNodes.forEach(childNode => textContent += childNode.textContent);\n          return textContent;\n        }\n\n        return '';\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/Node/firstChild\n       * @return Node's first child in the tree, or null if the node has no children.\n       */\n\n\n      get firstChild() {\n        return this.childNodes.length > 0 ? this.childNodes[0] : null;\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/Node/lastChild\n       * @return The last child of a node, or null if there are no child elements.\n       */\n\n\n      get lastChild() {\n        return this.childNodes.length > 0 ? this.childNodes[this.childNodes.length - 1] : null;\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/Node/nextSibling\n       * @return node immediately following the specified one in it's parent's childNodes, or null if one doesn't exist.\n       */\n\n\n      get nextSibling() {\n        if (this.parentNode === null) {\n          return null;\n        }\n\n        const parentChildNodes = this.parentNode.childNodes;\n        return parentChildNodes[parentChildNodes.indexOf(this) + 1] || null;\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/Node/previousSibling\n       * @return node immediately preceding the specified one in its parent's childNodes, or null if the specified node is the first in that list.\n       */\n\n\n      get previousSibling() {\n        if (this.parentNode === null) {\n          return null;\n        }\n\n        const parentChildNodes = this.parentNode.childNodes;\n        return parentChildNodes[parentChildNodes.indexOf(this) - 1] || null;\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/Node/hasChildNodes\n       * @return boolean if the Node has childNodes.\n       */\n\n\n      hasChildNodes() {\n        return this.childNodes.length > 0;\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/Node/contains\n       * @param otherNode\n       * @return whether a Node is a descendant of a given Node\n       */\n\n\n      contains(otherNode) {\n        if (this.childNodes.length > 0) {\n          if (this.childNodes.includes(this)) {\n            return true;\n          }\n\n          return this.childNodes.some(child => child.contains(otherNode));\n        }\n\n        return otherNode === this;\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore\n       * @param child\n       * @param referenceNode\n       * @return child after it has been inserted.\n       */\n\n\n      insertBefore(child, referenceNode) {\n        if (child === null) {\n          return null;\n        }\n\n        if (child === this) {\n          // The new child cannot contain the parent.\n          return child;\n        }\n\n        if (referenceNode == null) {\n          // When a referenceNode is not valid, appendChild(child).\n          this.appendChild(child);\n          mutate({\n            addedNodes: [child],\n            type: 2\n            /* CHILD_LIST */\n            ,\n            target: this\n          });\n          return child;\n        }\n\n        if (this.childNodes.indexOf(referenceNode) >= 0) {\n          // Should only insertBefore direct children of this Node.\n          child.remove(); // Removing a child can cause this.childNodes to change, meaning we need to splice from its updated location.\n\n          this.childNodes.splice(this.childNodes.indexOf(referenceNode), 0, child);\n          child.parentNode = this;\n          propagate(child, 'isConnected', this.isConnected);\n          mutate({\n            addedNodes: [child],\n            nextSibling: referenceNode,\n            type: 2\n            /* CHILD_LIST */\n            ,\n            target: this\n          });\n          return child;\n        }\n\n        return null;\n      }\n      /**\n       * Adds the specified childNode argument as the last child to the current node.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild\n       * @param child Child Node to append to this Node.\n       */\n\n\n      appendChild(child) {\n        child.remove();\n        child.parentNode = this;\n        propagate(child, 'isConnected', this.isConnected);\n        this.childNodes.push(child);\n        mutate({\n          addedNodes: [child],\n          previousSibling: this.childNodes[this.childNodes.length - 2],\n          type: 2\n          /* CHILD_LIST */\n          ,\n          target: this\n        });\n      }\n      /**\n       * Removes a child node from the current element.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild\n       * @param child Child Node to remove from this Node.\n       * @return Node removed from the tree or null if the node wasn't attached to this tree.\n       */\n\n\n      removeChild(child) {\n        const index = this.childNodes.indexOf(child);\n        const exists = index >= 0;\n\n        if (exists) {\n          child.parentNode = null;\n          propagate(child, 'isConnected', false);\n          this.childNodes.splice(index, 1);\n          mutate({\n            removedNodes: [child],\n            type: 2\n            /* CHILD_LIST */\n            ,\n            target: this\n          });\n          return child;\n        }\n\n        return null;\n      } // TODO(KB): Verify behaviour.\n\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/Node/replaceChild\n       * @param newChild new Node to replace old Node.\n       * @param oldChild existing Node to be replaced.\n       * @return child that was replaced.\n       */\n\n\n      replaceChild(newChild, oldChild) {\n        if (newChild !== oldChild) {\n          const index = this.childNodes.indexOf(oldChild);\n\n          if (index >= 0) {\n            oldChild.parentNode = null;\n            propagate(oldChild, 'isConnected', false);\n            this.childNodes.splice(index, 1, newChild);\n            mutate({\n              addedNodes: [newChild],\n              removedNodes: [oldChild],\n              type: 2\n              /* CHILD_LIST */\n              ,\n              target: this\n            });\n          }\n        }\n\n        return oldChild;\n      }\n      /**\n       * Removes this Node from the tree it belogs too.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove\n       */\n\n\n      remove() {\n        this.parentNode && this.parentNode.removeChild(this);\n      }\n      /**\n       * Add an event listener to callback when a specific event type is dispatched.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n       * @param type Event Type (i.e 'click')\n       * @param handler Function called when event is dispatched.\n       */\n\n\n      addEventListener(type, handler) {\n        const handlers = this._handlers_[toLower(type)];\n\n        let index = 0;\n\n        if (handlers && handlers.length > 0) {\n          index = handlers.push(handler);\n        } else {\n          this._handlers_[toLower(type)] = [handler];\n        }\n\n        mutate({\n          target: this,\n          type: 4\n          /* COMMAND */\n          ,\n          addedEvents: [{\n            [9\n            /* type */\n            ]: store$1(type),\n            [7\n            /* _index_ */\n            ]: this._index_,\n            [33\n            /* index */\n            ]: index\n          }]\n        });\n      }\n      /**\n       * Remove a registered event listener for a specific event type.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener\n       * @param type Event Type (i.e 'click')\n       * @param handler Function to stop calling when event is dispatched.\n       */\n\n\n      removeEventListener(type, handler) {\n        const handlers = this._handlers_[toLower(type)];\n\n        const index = !!handlers ? handlers.indexOf(handler) : -1;\n\n        if (index >= 0) {\n          handlers.splice(index, 1);\n          mutate({\n            target: this,\n            type: 4\n            /* COMMAND */\n            ,\n            removedEvents: [{\n              [9\n              /* type */\n              ]: store$1(type),\n              [7\n              /* _index_ */\n              ]: this._index_,\n              [33\n              /* index */\n              ]: index\n            }]\n          });\n        }\n      }\n      /**\n       * Dispatch an event for this Node.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent\n       * @param event Event to dispatch to this node and potentially cascade to parents.\n       */\n\n\n      dispatchEvent(event) {\n        let target = event.currentTarget = this;\n        let handlers;\n        let iterator;\n\n        do {\n          handlers = target && target._handlers_ && target._handlers_[toLower(event.type)];\n\n          if (handlers) {\n            for (iterator = handlers.length; iterator--;) {\n              if ((handlers[iterator].call(target, event) === false || event._end) && event.cancelable) {\n                break;\n              }\n            }\n          }\n        } while (event.bubbles && !(event.cancelable && event._stop) && (target = target && target.parentNode));\n\n        return !event.defaultPrevented;\n      }\n\n    }\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    class DOMTokenList {\n      /**\n       * The DOMTokenList interface represents a set of space-separated tokens.\n       * It is indexed beginning with 0 as with JavaScript Array objects and is case-sensitive.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList\n       * @param defineOn Element or class extension to define getter/setter pair for token list access.\n       * @param element Specific Element instance to modify when value is changed.\n       * @param attributeName Name of the attribute used by Element to access DOMTokenList.\n       * @param accessorKey Key used to access DOMTokenList directly from specific element.\n       * @param propertyName Key used to access DOMTokenList as string getter/setter.\n       */\n      constructor(defineOn, element, attributeName, accessorKey, propertyName) {\n        this.array_ = [];\n        this.element_ = element;\n        this.attributeName_ = attributeName;\n        this.storeAttributeMethod_ = element.storeAttributeNS_.bind(element);\n        element.propertyBackedAttributes_[attributeName] = [() => this.value, value => this.value = value];\n\n        if (accessorKey && propertyName) {\n          Object.defineProperty(defineOn.prototype, propertyName, {\n            enumerable: true,\n            configurable: true,\n\n            get() {\n              return this[accessorKey].value;\n            },\n\n            set(value) {\n              this[accessorKey].value = value;\n            }\n\n          });\n        }\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/value\n       * @return string representation of tokens (space delimitted).\n       */\n\n\n      get value() {\n        return this.array_.join(' ');\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/length\n       * @return integer representing the number of objects stored in the object.\n       */\n\n\n      get length() {\n        return this.array_.length;\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/value\n       * @param collection String of values space delimited to replace the current DOMTokenList with.\n       */\n\n\n      set value(collection) {\n        const oldValue = this.value;\n        const newValue = collection.trim(); // Replace current tokens with new tokens.\n\n        this.array_.splice(0, this.array_.length, ...(newValue !== '' ? newValue.split(/\\s+/) : ''));\n        this.mutationCompleteHandler_(oldValue, newValue);\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/item\n       * @param index number from DOMTokenList entities to retrieve value of\n       * @return value stored at the index requested, or undefined if beyond known range.\n       */\n\n\n      item(index) {\n        return this.array_[index];\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/contains\n       * @param token value the DOMTokenList is tested for.\n       * @return boolean indicating if the token is contained by the DOMTokenList.\n       */\n\n\n      contains(token) {\n        return this.array_.includes(token);\n      }\n      /**\n       * Add a token or tokens to the list.\n       * Note: All duplicates are removed, and the first token's position with the value is preserved.\n       *\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/add\n       * @param tokens each token is a string to add to a TokenList.\n       */\n\n\n      add(...tokens) {\n        const oldValue = this.value;\n        this.array_.splice(0, this.array_.length, ...new Set(this.array_.concat(tokens)));\n        this.mutationCompleteHandler_(oldValue, this.value);\n      }\n      /**\n       * Remove a token or tokens from the list.\n       * Note: All duplicates are removed, and the first token's position with the value is preserved.\n       *\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/remove\n       * @param tokens each token is a string to remove from a TokenList.\n       */\n\n\n      remove(...tokens) {\n        const oldValue = this.value;\n        this.array_.splice(0, this.array_.length, ...new Set(this.array_.filter(token => !tokens.includes(token))));\n        this.mutationCompleteHandler_(oldValue, this.value);\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/replace\n       * @param token\n       * @param newToken\n       */\n\n\n      replace(token, newToken) {\n        if (!this.array_.includes(token)) {\n          return;\n        }\n\n        const oldValue = this.value;\n        const set = new Set(this.array_);\n\n        if (token !== newToken) {\n          set.delete(token);\n\n          if (newToken !== '') {\n            set.add(newToken);\n          }\n        }\n\n        this.array_.splice(0, this.array_.length, ...set);\n        this.mutationCompleteHandler_(oldValue, this.value);\n      }\n      /**\n       * Adds or removes a token based on its presence in the token list.\n       *\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/toggle\n       * @param token string to add or remove from the token list\n       * @param force changes toggle into a one way-only operation. true => token added. false => token removed.\n       * @return true if the token is in the list following mutation, false if not.\n       */\n\n\n      toggle(token, force) {\n        if (!this.array_.includes(token)) {\n          if (force !== false) {\n            // Note, this will add the token if force is undefined (not passed into the method), or true.\n            this.add(token);\n          }\n\n          return true;\n        } else if (force !== true) {\n          // Note, this will remove the token if force is undefined (not passed into the method), or false.\n          this.remove(token);\n          return false;\n        }\n\n        return true;\n      }\n      /**\n       * Report tokenList mutations to MutationObserver.\n       * @param oldValue value before mutation\n       * @param value value after mutation\n       * @private\n       */\n\n\n      mutationCompleteHandler_(oldValue, value) {\n        this.storeAttributeMethod_(null, this.attributeName_, value);\n        mutate({\n          type: 0\n          /* ATTRIBUTES */\n          ,\n          target: this.element_,\n          attributeName: this.attributeName_,\n          value,\n          oldValue\n        });\n      }\n\n    }\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    const toString = attributes => attributes.map(({\n      name,\n      value\n    }) => keyValueString(name, value)).join(' ');\n    const matchPredicate = (namespaceURI, name) => attr => attr.namespaceURI === namespaceURI && attr.name === name;\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n\n    class CharacterData extends Node {\n      constructor(data, nodeType, nodeName) {\n        super(nodeType, nodeName);\n        this._data_ = data;\n      } // Unimplemented Methods\n      // NonDocumentTypeChildNode.nextElementSibling – https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/nextElementSibling\n      // NonDocumentTypeChildNode.previousElementSibling – https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/previousElementSibling\n      // CharacterData.appendData() – https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/appendData\n      // CharacterData.deleteData() – https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/deleteData\n      // CharacterData.insertData() – https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/insertData\n      // CharacterData.replaceData() – https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/replaceData\n      // CharacterData.substringData() – https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/substringData\n\n      /**\n       * @return Returns the string contained in private CharacterData.data\n       */\n\n\n      get data() {\n        return this._data_;\n      }\n      /**\n       * @param value string value to store as CharacterData.data.\n       */\n\n\n      set data(value) {\n        const oldValue = this.data;\n        this._data_ = value;\n        mutate({\n          target: this,\n          type: 1\n          /* CHARACTER_DATA */\n          ,\n          value,\n          oldValue\n        });\n      }\n      /**\n       * @return Returns the size of the string contained in CharacterData.data\n       */\n\n\n      get length() {\n        return this._data_.length;\n      }\n      /**\n       * @return Returns the string contained in CharacterData.data\n       */\n\n\n      get nodeValue() {\n        return this._data_;\n      }\n      /**\n       * @param value string value to store as CharacterData.data.\n       */\n\n\n      set nodeValue(value) {\n        this.data = value;\n      }\n\n    }\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n\n    class Text extends CharacterData {\n      constructor(data) {\n        super(data, 3\n        /* TEXT_NODE */\n        , '#text');\n        this._transferredFormat_ = {\n          [7\n          /* _index_ */\n          ]: this._index_,\n          [8\n          /* transferred */\n          ]: 1\n          /* TRUE */\n\n        };\n        this._creationFormat_ = {\n          [7\n          /* _index_ */\n          ]: this._index_,\n          [8\n          /* transferred */\n          ]: 0\n          /* FALSE */\n          ,\n          [0\n          /* nodeType */\n          ]: 3\n          /* TEXT_NODE */\n          ,\n          [1\n          /* nodeName */\n          ]: store$1('#text'),\n          [5\n          /* textContent */\n          ]: store$1(this.data)\n        };\n      } // Unimplemented Properties\n      // Text.isElementContentWhitespace – https://developer.mozilla.org/en-US/docs/Web/API/Text/isElementContentWhitespace\n      // Text.wholeText – https://developer.mozilla.org/en-US/docs/Web/API/Text/wholeText\n      // Text.assignedSlot – https://developer.mozilla.org/en-US/docs/Web/API/Text/assignedSlot\n\n\n      hydrate() {\n        return this._creationFormat_;\n      }\n      /**\n       * textContent getter, retrieves underlying CharacterData data.\n       * This is a different implmentation than DOMv1-4 APIs, but should be transparent to Frameworks.\n       */\n\n\n      get textContent() {\n        return this.data;\n      }\n      /**\n       * textContent setter, mutates underlying CharacterData data.\n       * This is a different implmentation than DOMv1-4 APIs, but should be transparent to Frameworks.\n       * @param value new value\n       */\n\n\n      set textContent(value) {\n        // Mutation Observation is performed by CharacterData.\n        this.nodeValue = value;\n      }\n      /**\n       * Breaks Text node into two nodes at the specified offset, keeping both nodes in the tree as siblings.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/Text/splitText\n       * @param offset number position to split text at.\n       * @return Text Node after the offset.\n       */\n\n\n      splitText(offset) {\n        const remainderTextNode = new Text(this.data.slice(offset, this.data.length));\n        const parentNode = this.parentNode;\n        this.nodeValue = this.data.slice(0, offset);\n\n        if (parentNode !== null) {\n          // When this node is attached to the DOM, the remainder text needs to be inserted directly after.\n          const parentChildNodes = parentNode.childNodes;\n          const insertBeforePosition = parentChildNodes.indexOf(this) + 1;\n          const insertBeforeNode = parentChildNodes.length >= insertBeforePosition ? parentChildNodes[insertBeforePosition] : null;\n          return parentNode.insertBefore(remainderTextNode, insertBeforeNode);\n        }\n\n        return remainderTextNode;\n      }\n\n    }\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n\n    const hyphenateKey = key => toLower(key.replace(/(webkit|ms|moz|khtml)/g, '-$1').replace(/([a-zA-Z])(?=[A-Z])/g, '$1-'));\n\n    const appendKeys = keys => {\n      const keysToAppend = keys.filter(key => !CSSStyleDeclaration.prototype.hasOwnProperty(key));\n\n      if (keysToAppend.length <= 0) {\n        return;\n      }\n\n      const previousPrototypeLength = CSSStyleDeclaration.prototype.length || 0;\n\n      if (previousPrototypeLength !== 0) {\n        CSSStyleDeclaration.prototype.length = previousPrototypeLength + keysToAppend.length;\n      } else {\n        Object.defineProperty(CSSStyleDeclaration.prototype, 'length', {\n          configurable: true,\n          writable: true,\n          value: keysToAppend.length\n        });\n      }\n\n      keysToAppend.forEach((key, index) => {\n        const hyphenatedKey = hyphenateKey(key);\n        CSSStyleDeclaration.prototype[index + previousPrototypeLength] = hyphenatedKey;\n        Object.defineProperties(CSSStyleDeclaration.prototype, {\n          [key]: {\n            get() {\n              return this.getPropertyValue(hyphenatedKey);\n            },\n\n            set(value) {\n              this.setProperty(hyphenatedKey, value);\n            }\n\n          }\n        });\n      });\n    };\n    class CSSStyleDeclaration {\n      constructor(element) {\n        this.properties_ = {};\n        this.storeAttributeMethod_ = element.storeAttributeNS_.bind(element);\n        this.element_ = element;\n\n        if (element && element.propertyBackedAttributes_) {\n          element.propertyBackedAttributes_.style = [() => this.cssText, value => this.cssText = value];\n        }\n      }\n      /**\n       * Retrieve the value for a given property key.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/getPropertyValue\n       * @param key the name of the property to retrieve the value for.\n       * @return value stored for the provided key.\n       */\n\n\n      getPropertyValue(key) {\n        return this.properties_[key] || '';\n      }\n      /**\n       * Remove a value for a given property key.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/removeProperty\n       * @param key the name of the property to retrieve the value for.\n       * @return previously stored value for the provided key.\n       */\n\n\n      removeProperty(key) {\n        const oldValue = this.getPropertyValue(key);\n        this.properties_[key] = null;\n        this.mutationCompleteHandler_(this.cssText);\n        return oldValue;\n      }\n      /**\n       * Stores a given value for the provided key.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/setProperty\n       * @param key modify this key\n       * @param value store this value\n       */\n\n\n      setProperty(key, value) {\n        this.properties_[key] = value;\n        this.mutationCompleteHandler_(this.cssText);\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/cssText\n       * @return css text string representing known and valid style declarations.\n       */\n\n\n      get cssText() {\n        let value;\n        let returnValue = '';\n\n        for (let key in this.properties_) {\n          if ((value = this.getPropertyValue(key)) !== '') {\n            returnValue += `${key}: ${value}; `;\n          }\n        }\n\n        return returnValue.trim();\n      }\n      /**\n       * Replace all style declarations with new values parsed from a cssText string.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/cssText\n       * @param value css text string to parse and store\n       */\n\n\n      set cssText(value) {\n        this.properties_ = {};\n        const values = value.split(/[:;]/);\n        const length = values.length;\n\n        for (let index = 0; index + 1 < length; index += 2) {\n          this.properties_[toLower(values[index].trim())] = values[index + 1].trim();\n        }\n\n        this.mutationCompleteHandler_(this.cssText);\n      }\n      /**\n       * Report CSSStyleDeclaration mutations to MutationObserver.\n       * @param value value after mutation\n       * @private\n       */\n\n\n      mutationCompleteHandler_(value) {\n        const oldValue = this.storeAttributeMethod_(null, 'style', value);\n        mutate({\n          type: 0\n          /* ATTRIBUTES */\n          ,\n          target: this.element_,\n          attributeName: 'style',\n          value,\n          oldValue\n        });\n      }\n\n    }\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    // To future authors: It would be great if we could enforce that elements are not modified by a ConditionPredicate.\n    const tagNameConditionPredicate = tagNames => element => tagNames.includes(element.tagName);\n    const matchChildrenElements = (element, conditionPredicate) => {\n      const matchingElements = [];\n      element.children.forEach(child => {\n        if (conditionPredicate(child)) {\n          matchingElements.push(child);\n        }\n\n        matchingElements.push(...matchChildrenElements(child, conditionPredicate));\n      });\n      return matchingElements;\n    };\n    const matchChildElement = (element, conditionPredicate) => {\n      let returnValue = null;\n      element.children.some(child => {\n        if (conditionPredicate(child)) {\n          returnValue = child;\n          return true;\n        }\n\n        const grandChildMatch = matchChildElement(child, conditionPredicate);\n\n        if (grandChildMatch !== null) {\n          returnValue = grandChildMatch;\n          return true;\n        }\n\n        return false;\n      });\n      return returnValue;\n    };\n    const matchNearestParent = (element, conditionPredicate) => {\n      while (element = element.parentNode) {\n        if (conditionPredicate(element)) {\n          return element;\n        }\n      }\n\n      return null;\n    };\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    const reflectProperties = (properties, defineOn) => {\n      properties.forEach(pair => {\n        for (let key in pair) {\n          const defaultValue = pair[key][0];\n          const propertyIsNumber = typeof defaultValue === 'number';\n          const propertyIsBoolean = typeof defaultValue === 'boolean';\n          const attributeKey = pair[key][1] || toLower(key);\n          Object.defineProperty(defineOn.prototype, key, {\n            enumerable: true,\n\n            get() {\n              const storedAttribute = this.getAttribute(attributeKey);\n\n              if (propertyIsBoolean) {\n                return storedAttribute !== null ? storedAttribute === 'true' : defaultValue;\n              }\n\n              const castableValue = storedAttribute || defaultValue;\n              return propertyIsNumber ? Number(castableValue) : String(castableValue);\n            },\n\n            set(value) {\n              this.setAttribute(attributeKey, String(value));\n            }\n\n          });\n        }\n      });\n    };\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n\n    const isElementPredicate = node => node.nodeType === 1\n    /* ELEMENT_NODE */\n    ;\n\n    const NODE_NAME_MAPPING = {};\n    function registerSubclass(nodeName, subclass) {\n      NODE_NAME_MAPPING[nodeName] = subclass;\n    }\n    class Element extends Node {\n      constructor(nodeType, nodeName, namespaceURI) {\n        super(nodeType, nodeName);\n        this.attributes = [];\n        this.propertyBackedAttributes_ = {};\n        this.classList = new DOMTokenList(Element, this, 'class', 'classList', 'className');\n        this.style = new CSSStyleDeclaration(this);\n        this.namespaceURI = namespaceURI;\n        this._transferredFormat_ = {\n          [7\n          /* _index_ */\n          ]: this._index_,\n          [8\n          /* transferred */\n          ]: 1\n          /* TRUE */\n\n        };\n        this._creationFormat_ = {\n          [7\n          /* _index_ */\n          ]: this._index_,\n          [8\n          /* transferred */\n          ]: 0\n          /* FALSE */\n          ,\n          [0\n          /* nodeType */\n          ]: this.nodeType,\n          [1\n          /* nodeName */\n          ]: store$1(this.nodeName),\n          [6\n          /* namespaceURI */\n          ]: this.namespaceURI === null ? undefined : store$1(this.namespaceURI)\n        };\n      }\n      /**\n       * When hydrating the tree, we need to send HydrateableNode representations\n       * for the main thread to process and store items from for future modifications.\n       */\n\n\n      hydrate() {\n        return Object.assign({}, this._creationFormat_, this.childNodes.length > 0 ? {\n          [4\n          /* childNodes */\n          ]: this.childNodes.map(node => node.hydrate())\n        } : {}, this.attributes.length > 0 ? {\n          [2\n          /* attributes */\n          ]: this.attributes.map(attribute => [store$1(attribute.namespaceURI || 'null'), store$1(attribute.name), store$1(attribute.value)])\n        } : {});\n      } // Unimplemented properties\n      // Element.clientHeight – https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight\n      // Element.clientLeft – https://developer.mozilla.org/en-US/docs/Web/API/Element/clientLeft\n      // Element.clientTop – https://developer.mozilla.org/en-US/docs/Web/API/Element/clientTop\n      // Element.clientWidth – https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth\n      // Element.querySelector – https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector\n      // Element.querySelectorAll – https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelectorAll\n      // set Element.innerHTML – https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML\n      // Element.localName – https://developer.mozilla.org/en-US/docs/Web/API/Element/localName\n      // NonDocumentTypeChildNode.nextElementSibling – https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/nextElementSibling\n      // Element.prefix – https://developer.mozilla.org/en-US/docs/Web/API/Element/prefix\n      // NonDocummentTypeChildNode.previousElementSibling – https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/previousElementSibling\n      // Element.scrollHeight – https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight\n      // Element.scrollLeft – https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft\n      // Element.scrollLeftMax – https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeftMax\n      // Element.scrollTop – https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop\n      // Element.scrollTopMax – https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTopMax\n      // Element.scrollWidth – https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollWidth\n      // Element.shadowRoot – !! CustomElements – https://developer.mozilla.org/en-US/docs/Web/API/Element/shadowRoot\n      // Element.slot – !! CustomElements – https://developer.mozilla.org/en-US/docs/Web/API/Element/slot\n      // Element.tabStop – https://developer.mozilla.org/en-US/docs/Web/API/Element/tabStop\n      // Element.undoManager – https://developer.mozilla.org/en-US/docs/Web/API/Element/undoManager\n      // Element.undoScope – https://developer.mozilla.org/en-US/docs/Web/API/Element/undoScope\n      // Unimplemented Methods\n      // Element.attachShadow() – !! CustomElements – https://developer.mozilla.org/en-US/docs/Web/API/Element/attachShadow\n      // Element.animate() – https://developer.mozilla.org/en-US/docs/Web/API/Element/animate\n      // Element.closest() – https://developer.mozilla.org/en-US/docs/Web/API/Element/closest\n      // Element.getAttributeNames() – https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNames\n      // Element.getBoundingClientRect() – https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\n      // Element.getClientRects() – https://developer.mozilla.org/en-US/docs/Web/API/Element/getClientRects\n      // Element.getElementsByTagNameNS() – https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagNameNS\n      // Element.insertAdjacentElement() – https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentElement\n      // Element.insertAdjacentHTML() – https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML\n      // Element.insertAdjacentText() – https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentText\n      // Element.matches() – https://developer.mozilla.org/en-US/docs/Web/API/Element/matches\n      // Element.querySelector() – https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector\n      // Element.querySelectorAll() – https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelectorAll\n      // Element.releasePointerCapture() – https://developer.mozilla.org/en-US/docs/Web/API/Element/releasePointerCapture\n      // Element.requestFullscreen() – https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullscreen\n      // Element.requestPointerLock() – https://developer.mozilla.org/en-US/docs/Web/API/Element/requestPointerLock\n      // Element.scrollIntoView() – https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView\n      // Element.setCapture() – https://developer.mozilla.org/en-US/docs/Web/API/Element/setCapture\n      // Element.setPointerCapture() – https://developer.mozilla.org/en-US/docs/Web/API/Element/setPointerCapture\n      // Mixins not implemented\n      // Slotable.assignedSlot – https://developer.mozilla.org/en-US/docs/Web/API/Slotable/assignedSlot\n\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML\n       * @return string representation of serialized HTML describing the Element and its descendants.\n       */\n\n\n      get outerHTML() {\n        return `<${[this.nodeName, toString(this.attributes)].join(' ').trim()}>${this.innerHTML}</${this.nodeName}>`;\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML\n       * @return string representation of serialized HTML describing the Element's descendants.\n       */\n\n\n      get innerHTML() {\n        const childNodes = this.childNodes;\n\n        if (childNodes.length) {\n          return childNodes.map(child => child.nodeType === 1\n          /* ELEMENT_NODE */\n          ? child.outerHTML : child.textContent).join('');\n        }\n\n        return '';\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent\n       * @param text new text replacing all childNodes content.\n       */\n\n\n      set textContent(text) {\n        // TODO(KB): Investigate removing all children in a single .splice to childNodes.\n        this.childNodes.forEach(childNode => childNode.remove());\n        this.appendChild(new Text(text));\n      }\n      /**\n       * Getter returning the text representation of Element.childNodes.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent\n       * @return text from all childNodes.\n       */\n\n\n      get textContent() {\n        return super.textContent;\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/tagName\n       * @return string tag name (i.e 'div')\n       */\n\n\n      get tagName() {\n        return this.nodeName;\n      }\n      /**\n       * Getter returning children of an Element that are Elements themselves.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/children\n       * @return Element objects that are children of this ParentNode, omitting all of its non-element nodes.\n       */\n\n\n      get children() {\n        return this.childNodes.filter(isElementPredicate);\n      }\n      /**\n       * Getter returning the number of child elements of a Element.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/childElementCount\n       * @return number of child elements of the given Element.\n       */\n\n\n      get childElementCount() {\n        return this.children.length;\n      }\n      /**\n       * Getter returning the first Element in Element.childNodes.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/firstElementChild\n       * @return first childNode that is also an element.\n       */\n\n\n      get firstElementChild() {\n        return this.childNodes.find(isElementPredicate) || null;\n      }\n      /**\n       * Getter returning the last Element in Element.childNodes.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/lastElementChild\n       * @return first childNode that is also an element.\n       */\n\n\n      get lastElementChild() {\n        const children = this.children;\n        return children[children.length - 1] || null;\n      }\n      /**\n       * Sets the value of an attribute on this element using a null namespace.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute\n       * @param name attribute name\n       * @param value attribute value\n       */\n\n\n      setAttribute(name, value) {\n        this.setAttributeNS(null, name, value);\n      }\n      /**\n       * Get the value of an attribute on this Element with the null namespace.\n       *\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute\n       * @param name attribute name\n       * @return value of a specified attribute on the element, or null if the attribute doesn't exist.\n       */\n\n\n      getAttribute(name) {\n        return this.getAttributeNS(null, name);\n      }\n      /**\n       * Remove an attribute from this element in the null namespace.\n       *\n       * Method returns void, so it is not chainable.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute\n       * @param name attribute name\n       */\n\n\n      removeAttribute(name) {\n        this.removeAttributeNS(null, name);\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttribute\n       * @param name attribute name\n       * @return Boolean indicating if the element has the specified attribute.\n       */\n\n\n      hasAttribute(name) {\n        return this.hasAttributeNS(null, name);\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributes\n       * @return Boolean indicating if the element has any attributes.\n       */\n\n\n      hasAttributes() {\n        return this.attributes.length > 0;\n      }\n      /**\n       * Sets the value of an attribute on this Element with the provided namespace.\n       *\n       * If the attribute already exists, the value is updated; otherwise a new attribute is added with the specified name and value.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNS\n       * @param namespaceURI\n       * @param name attribute name\n       * @param value attribute value\n       */\n\n\n      setAttributeNS(namespaceURI, name, value) {\n        if (this.propertyBackedAttributes_[name] !== undefined) {\n          if (!this.attributes.find(matchPredicate(namespaceURI, name))) {\n            this.attributes.push({\n              namespaceURI,\n              name,\n              value\n            });\n          }\n\n          this.propertyBackedAttributes_[name][1](value);\n          return;\n        }\n\n        const oldValue = this.storeAttributeNS_(namespaceURI, name, value);\n        mutate({\n          type: 0\n          /* ATTRIBUTES */\n          ,\n          target: this,\n          attributeName: name,\n          attributeNamespace: namespaceURI,\n          value,\n          oldValue\n        });\n      }\n\n      storeAttributeNS_(namespaceURI, name, value) {\n        const attr = this.attributes.find(matchPredicate(namespaceURI, name));\n        const oldValue = attr && attr.value || '';\n\n        if (attr) {\n          attr.value = value;\n        } else {\n          this.attributes.push({\n            namespaceURI,\n            name,\n            value\n          });\n        }\n\n        return oldValue;\n      }\n      /**\n       * Get the value of an attribute on this Element with the specified namespace.\n       *\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNS\n       * @param namespaceURI attribute namespace\n       * @param name attribute name\n       * @return value of a specified attribute on the element, or null if the attribute doesn't exist.\n       */\n\n\n      getAttributeNS(namespaceURI, name) {\n        const attr = this.attributes.find(matchPredicate(namespaceURI, name));\n\n        if (attr) {\n          return this.propertyBackedAttributes_[name] !== undefined ? this.propertyBackedAttributes_[name][0]() : attr.value;\n        }\n\n        return null;\n      }\n      /**\n       * Remove an attribute from this element in the specified namespace.\n       *\n       * Method returns void, so it is not chainable.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute\n       * @param namespaceURI attribute namespace\n       * @param name attribute name\n       */\n\n\n      removeAttributeNS(namespaceURI, name) {\n        const index = this.attributes.findIndex(matchPredicate(namespaceURI, name));\n\n        if (index >= 0) {\n          const oldValue = this.attributes[index].value;\n          this.attributes.splice(index, 1);\n          mutate({\n            type: 0\n            /* ATTRIBUTES */\n            ,\n            target: this,\n            attributeName: name,\n            attributeNamespace: namespaceURI,\n            oldValue\n          });\n        }\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributeNS\n       * @param namespaceURI attribute namespace\n       * @param name attribute name\n       * @return Boolean indicating if the element has the specified attribute.\n       */\n\n\n      hasAttributeNS(namespaceURI, name) {\n        return this.attributes.some(matchPredicate(namespaceURI, name));\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByClassName\n       * @param names contains one more more classnames to match on. Multiples are space seperated, indicating an AND operation.\n       * @return Element array with matching classnames\n       */\n\n\n      getElementsByClassName(names) {\n        const inputClassList = names.split(' '); // TODO(KB) – Compare performance of [].some(value => DOMTokenList.contains(value)) and regex.\n        // const classRegex = new RegExp(classNames.split(' ').map(name => `(?=.*${name})`).join(''));\n\n        return matchChildrenElements(this, element => inputClassList.some(inputClassName => element.classList.contains(inputClassName)));\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagName\n       * @param tagName the qualified name to look for. The special string \"*\" represents all elements.\n       * @return Element array with matching tagnames\n       */\n\n\n      getElementsByTagName(tagName) {\n        return matchChildrenElements(this, tagName === '*' ? _ => true : element => element.tagName === tagName);\n      }\n\n    }\n    reflectProperties([{\n      id: ['']\n    }], Element);\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    class HTMLElement extends Element {\n      /**\n       * Find the nearest parent form element.\n       * Implemented in HTMLElement since so many extensions of HTMLElement repeat this functionality. This is not to spec.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement\n       * @return nearest parent form element.\n       */\n      get form() {\n        return matchNearestParent(this, tagNameConditionPredicate(['form']));\n      }\n\n    } // Reflected properties\n    // HTMLElement.accessKey => string, reflected attribute\n    // HTMLElement.contentEditable => string, reflected attribute\n    // HTMLElement.dir => string, reflected attribute\n    // HTMLElement.lang => string, reflected attribute\n    // HTMLElement.title => string, reflected attribute\n    // HTMLElement.draggable => boolean, reflected attribute\n    // HTMLElement.hidden => boolean, reflected attribute\n    // HTMLElement.noModule => boolean, reflected attribute\n    // HTMLElement.spellcheck => boolean, reflected attribute\n    // HTMLElement.translate => boolean, reflected attribute\n\n    reflectProperties([{\n      accessKey: ['']\n    }, {\n      contentEditable: ['inherit']\n    }, {\n      dir: ['']\n    }, {\n      lang: ['']\n    }, {\n      title: ['']\n    }, {\n      draggable: [false]\n    }, {\n      hidden: [false]\n    }, {\n      noModule: [false]\n    }, {\n      spellcheck: [true]\n    }, {\n      translate: [true]\n    }], HTMLElement); // Properties\n    // HTMLElement.accessKeyLabel => string, readonly value of \"accessKey\"\n    // HTMLElement.isContentEditable => boolean, readonly value of contentEditable\n    // HTMLElement.nonce => string, NOT REFLECTED\n    // HTMLElement.tabIndex => number, reflected attribute\n    // Layout Properties (TBD)\n    // HTMLElement.offsetHeight => double, readonly\n    // HTMLElement.offsetLeft => double, readonly\n    // HTMLElement.offsetParent => Element\n    // HTMLElement.offsetTop => double, readonly\n    // HTMLElement.offsetWidth => double, readonly\n    // Unimplemented Properties\n    // HTMLElement.contextMenu => HTMLElement\n    // HTMLElement.dataset => Map<string (get/set), string>\n    // HTMLElement.dropzone => DOMSettableTokenList (DOMTokenList)\n    // HTMLElement.inert => boolean, reflected\n    // HTMLElement.itemScope => boolean\n    // HTMLElement.itemType => DOMSettableTokenList (DOMTokenList)\n    // HTMLElement.itemId => string\n    // HTMLElement.itemRef => DOMSettableTokenList (DOMTokenList)\n    // HTMLElement.itemProp => DOMSettableTokenList (DOMTokenList)\n    // HTMLElement.itemValue => object\n    // HTMLElement.properties => HTMLPropertiesCollection, readonly\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    class HTMLAnchorElement extends HTMLElement {\n      constructor() {\n        super(...arguments);\n        this.relList = new DOMTokenList(HTMLAnchorElement, this, 'rel', 'relList', 'rel');\n      }\n      /**\n       * Returns the href property/attribute value\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/toString\n       * @return string href attached to HTMLAnchorElement\n       */\n\n\n      toString() {\n        return this.href;\n      }\n      /**\n       * A Synonym for the Node.textContent property getter.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement\n       * @return value of text node direct child of this Element.\n       */\n\n\n      get text() {\n        return this.textContent;\n      }\n      /**\n       * A Synonym for the Node.textContent property setter.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement\n       * @param text replacement for all current childNodes.\n       */\n\n\n      set text(text) {\n        this.textContent = text;\n      }\n\n    }\n    registerSubclass('a', HTMLAnchorElement); // Reflected properties, strings.\n    // HTMLAnchorElement.href => string, reflected attribute\n    // HTMLAnchorElement.hreflang => string, reflected attribute\n    // HTMLAnchorElement.media => string, reflected attribute\n    // HTMLAnchorElement.target => string, reflected attribute\n    // HTMLAnchorElement.type => string, reflected attribute\n\n    reflectProperties([{\n      href: ['']\n    }, {\n      hreflang: ['']\n    }, {\n      media: ['']\n    }, {\n      target: ['']\n    }, {\n      type: ['']\n    }], HTMLAnchorElement); // Unimplemented\n    // HTMLAnchorElement.download => string, reflected attribute\n    // HTMLAnchorElement.type => Is a DOMString that reflects the type HTML attribute, indicating the MIME type of the linked resource.\n    // Unimplemented URL parse of href attribute due to IE11 compatibility and low usage.\n    // Note: Implementation doable using a private url property\n\n    /*\n      class {\n        private url: URL | null = null;\n\n        constructor(...) {\n          // Element.getAttribute('href') => Element.href.\n          Object.assign(this.propertyBackedAttributes_, {\n            href: this.href,\n          });\n        }\n\n        get href(): string {\n          return this.url ? this.url.href : '';\n        }\n        set href(url: string) {\n          this.url = new URL(url);\n          this.setAttribute('href', this.url.href);\n        }\n      }\n    */\n    // HTMLAnchorElement.host => string\n    // HTMLAnchorElement.hostname => string\n    // HTMLAnchorElement.protocol => string\n    // HTMLAnchorElement.pathname => string\n    // HTMLAnchorElement.search => string\n    // HTMLAnchorElement.hash => string\n    // HTMLAnchorElement.username => string\n    // HTMLAnchorElement.password => string\n    // HTMLAnchorElement.origin => string, readonly (getter no setter)\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    class HTMLButtonElement extends HTMLElement {}\n    registerSubclass('button', HTMLButtonElement); // Reflected properties, strings.\n    // HTMLButtonElement.formAction => string, reflected attribute\n    // HTMLButtonElement.formEnctype => string, reflected attribute\n    // HTMLButtonElement.formMethod => string, reflected attribute\n    // HTMLButtonElement.formTarget => string, reflected attribute\n    // HTMLButtonElement.name => string, reflected attribute\n    // HTMLButtonElement.type => string, reflected attribute (default submit)\n    // HTMLButtonElement.value => string, reflected attribute\n    // HTMLButtonElement.autofocus => boolean, reflected attribute\n    // HTMLButtonElement.disabled => boolean, reflected attribute\n\n    reflectProperties([{\n      formAction: ['']\n    }, {\n      formEnctype: ['']\n    }, {\n      formMethod: ['']\n    }, {\n      formTarget: ['']\n    }, {\n      name: ['']\n    }, {\n      type: ['submit']\n    }, {\n      value: ['']\n    }, {\n      autofocus: [false]\n    }, {\n      disabled: [false]\n    }], HTMLButtonElement); // Not reflected\n    // HTMLButtonElement.formNoValidate => boolean\n    // HTMLButtonElement.validity => ValidityState, readonly\n    // Unimplemented\n    // HTMLButtonElement.form => HTMLFormElement | null, readonly\n    // HTMLButtonElement.labels => Array<HTMLLabelElement>, readonly\n    // HTMLButtonElement.menu => HTMLMenuElement\n    // HTMLButtonElement.willValidate => boolean, readonly\n    // HTMLButtonElement.validationMessage => string, readonly\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    class HTMLDataElement extends HTMLElement {}\n    registerSubclass('data', HTMLDataElement); // Reflected properties, strings.\n    // HTMLEmbedElement.value => string, reflected attribute\n\n    reflectProperties([{\n      value: ['']\n    }], HTMLDataElement);\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    class HTMLEmbedElement extends HTMLElement {}\n    registerSubclass('embed', HTMLEmbedElement); // Reflected properties, strings.\n    // HTMLEmbedElement.height => string, reflected attribute\n    // HTMLEmbedElement.src => string, reflected attribute\n    // HTMLEmbedElement.type => string, reflected attribute\n    // HTMLEmbedElement.width => string, reflected attribute\n\n    reflectProperties([{\n      height: ['']\n    }, {\n      src: ['']\n    }, {\n      type: ['']\n    }, {\n      width: ['']\n    }], HTMLEmbedElement); // Unimplemented\n    // HTMLEmbedElement.align => string, not reflected\n    // HTMLEmbedElement.name => string, not reflected\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    const MATCHING_CHILD_ELEMENT_TAGNAMES = 'button fieldset input object output select textarea'.split(' ');\n    /**\n     * The HTMLFormControlsCollection interface represents a collection of HTML form control elements.\n     * It is mixedin to both HTMLFormElement and HTMLFieldSetElement.\n     */\n\n    const HTMLFormControlsCollectionMixin = defineOn => {\n      Object.defineProperty(defineOn.prototype, 'elements', {\n        /**\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormControlsCollection\n         * @return Element array matching children of specific tagnames.\n         */\n        get() {\n          return matchChildrenElements(this, tagNameConditionPredicate(MATCHING_CHILD_ELEMENT_TAGNAMES));\n        }\n\n      });\n    };\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    class HTMLFieldSetElement extends HTMLElement {\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement\n       * @return hardcoded string 'fieldset'\n       */\n      get type() {\n        return this.tagName;\n      }\n\n    }\n    registerSubclass('fieldset', HTMLFieldSetElement);\n    HTMLFormControlsCollectionMixin(HTMLFieldSetElement); // Reflected properties\n    // HTMLFieldSetElement.name => string, reflected attribute\n    // HTMLFieldSetElement.disabled => boolean, reflected attribute\n\n    reflectProperties([{\n      name: ['']\n    }, {\n      disabled: [false]\n    }], HTMLFieldSetElement); // Unimplemented properties\n    // HTMLFieldSetElement.validity\n    // HTMLFieldSetElement.willValidate\n    // HTMLFieldSetElement.validationMessage\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    class HTMLFormElement extends HTMLElement {\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/length\n       * @return number of controls in the form\n       */\n      get length() {\n        return this.elements.length;\n      }\n\n    }\n    registerSubclass('form', HTMLFormElement);\n    HTMLFormControlsCollectionMixin(HTMLFormElement); // Reflected properties\n    // HTMLFormElement.name => string, reflected attribute\n    // HTMLFormElement.method => string, reflected attribute\n    // HTMLFormElement.target => string, reflected attribute\n    // HTMLFormElement.action => string, reflected attribute\n    // HTMLFormElement.enctype => string, reflected attribute\n    // HTMLFormElement.acceptCharset => string, reflected attribute\n    // HTMLFormElement.autocomplete => string, reflected attribute\n    // HTMLFormElement.autocapitalize => string, reflected attribute\n\n    reflectProperties([{\n      name: ['']\n    }, {\n      method: ['get']\n    }, {\n      target: ['']\n    }, {\n      action: ['']\n    }, {\n      enctype: ['application/x-www-form-urlencoded']\n    }, {\n      acceptCharset: ['', 'accept-charset']\n    }, {\n      autocomplete: ['on']\n    }, {\n      autocapitalize: ['sentences']\n    }], HTMLFormElement); // Unimplemented properties\n    // HTMLFormElement.encoding => string, reflected attribute\n    // HTMLFormElement.noValidate => boolean, reflected attribute\n\n    /*\n    Unimplemented, TBD:\n\n    Named inputs are added to their owner form instance as properties, and can overwrite native properties\n    if they share the same name (eg a form with an input named action will have its action property return\n    that input instead of the form's action HTML attribute).\n    */\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    class HTMLIFrameElement extends HTMLElement {\n      constructor() {\n        super(...arguments); // HTMLIFrameElement.sandbox, DOMTokenList, reflected attribute\n\n        this.sandbox = new DOMTokenList(HTMLIFrameElement, this, 'sandbox', null, null);\n      }\n\n    }\n    registerSubclass('iframe', HTMLIFrameElement); // Reflected properties\n    // HTMLIFrameElement.allow => string, reflected attribute\n    // HTMLIFrameElement.allowFullscreen => boolean, reflected attribute\n    // HTMLIFrameElement.csp => string, reflected attribute\n    // HTMLIFrameElement.height => string, reflected attribute\n    // HTMLIFrameElement.name => string, reflected attribute\n    // HTMLIFrameElement.referrerPolicy => string, reflected attribute\n    // HTMLIFrameElement.src => string, reflected attribute\n    // HTMLIFrameElement.srcdoc => string, reflected attribute\n    // HTMLIFrameElement.width => string, reflected attribute\n\n    reflectProperties([{\n      allow: ['']\n    }, {\n      allowFullscreen: [false]\n    }, {\n      csp: ['']\n    }, {\n      height: ['']\n    }, {\n      name: ['']\n    }, {\n      referrerPolicy: ['']\n    }, {\n      src: ['']\n    }, {\n      srcdoc: ['']\n    }, {\n      width: ['']\n    }], HTMLIFrameElement); // Unimplemented Properties\n    // HTMLIFrameElement.allowPaymentRequest => boolean, reflected attribute\n    // HTMLIFrameElement.contentDocument => Document, read only (active document in the inline frame's nested browsing context)\n    // HTMLIFrameElement.contentWindow => WindowProxy, read only (window proxy for the nested browsing context)\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    class HTMLImageElement extends HTMLElement {}\n    registerSubclass('img', HTMLImageElement); // Reflected Properties\n    // HTMLImageElement.alt => string, reflected attribute\n    // HTMLImageElement.crossOrigin => string, reflected attribute\n    // HTMLImageElement.height => number, reflected attribute\n    // HTMLImageElement.isMap => boolean, reflected attribute\n    // HTMLImageElement.referrerPolicy => string, reflected attribute\n    // HTMLImageElement.src => string, reflected attribute\n    // HTMLImageElement.sizes => string, reflected attribute\n    // HTMLImageElement.srcset => string, reflected attribute\n    // HTMLImageElement.useMap => string, reflected attribute\n    // HTMLImageElement.width => number, reflected attribute\n\n    reflectProperties([{\n      alt: ['']\n    }, {\n      crossOrigin: ['']\n    }, {\n      height: [0]\n    }, {\n      isMap: [false]\n    }, {\n      referrerPolicy: ['']\n    }, {\n      src: ['']\n    }, {\n      sizes: ['']\n    }, {\n      srcset: ['']\n    }, {\n      useMap: ['']\n    }, {\n      width: [0]\n    }], HTMLImageElement); // Unimplmented Properties\n    // HTMLImageElement.complete Read only\n    // Returns a Boolean that is true if the browser has finished fetching the image, whether successful or not. It also shows true, if the image has no src value.\n    // HTMLImageElement.currentSrc Read only\n    // Returns a DOMString representing the URL to the currently displayed image (which may change, for example in response to media queries).\n    // HTMLImageElement.naturalHeight Read only\n    // Returns a unsigned long representing the intrinsic height of the image in CSS pixels, if it is available; else, it shows 0.\n    // HTMLImageElement.naturalWidth Read only\n    // Returns a unsigned long representing the intrinsic width of the image in CSS pixels, if it is available; otherwise, it will show 0.\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * The HTMLInputLabels interface represents a collection of input getters for their related label Elements.\n     * It is mixedin to both HTMLInputElement, HTMLMeterElement, and HTMLProgressElement.\n     */\n\n    const HTMLInputLabelsMixin = defineOn => {\n      Object.defineProperty(defineOn.prototype, 'labels', {\n        /**\n         * Getter returning label elements associated to this meter.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement/labels\n         * @return label elements associated to this meter.\n         */\n        get() {\n          return matchChildrenElements(this.ownerDocument || this, element => element.tagName === 'label' && element.for && element.for === this.id);\n        }\n\n      });\n    };\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    class HTMLInputElement extends HTMLElement {}\n    registerSubclass('input', HTMLInputElement);\n    HTMLInputLabelsMixin(HTMLInputElement); // Reflected Properties\n    // HTMLInputElement.formAction => string, reflected attribute\n    // HTMLInputElement.formEncType\t=> string, reflected attribute\n    // HTMLInputElement.formMethod => string, reflected attribute\n    // HTMLInputElement.formTarget => string, reflected attribute\n    // HTMLInputElement.name => string, reflected attribute\n    // HTMLInputElement.type => string, reflected attribute\n    // HTMLInputElement.disabled => boolean, reflected attribute\n    // HTMLInputElement.autofocus => boolean, reflected attribute\n    // HTMLInputElement.required => boolean, reflected attribute\n    // HTMLInputElement.defaultChecked => boolean, reflected attribute (\"checked\")\n    // HTMLInputElement.alt => string, reflected attribute\n    // HTMLInputElement.height => number, reflected attribute\n    // HTMLInputElement.src => string, reflected attribute\n    // HTMLInputElement.width => number, reflected attribute\n    // HTMLInputElement.accept => string, reflected attribute\n    // HTMLInputElement.autocomplete => string, reflected attribute\n    // HTMLInputElement.maxLength => number, reflected attribute\n    // HTMLInputElement.size => number, reflected attribute\n    // HTMLInputElement.pattern => string, reflected attribute\n    // HTMLInputElement.placeholder => string, reflected attribute\n    // HTMLInputElement.readOnly => boolean, reflected attribute\n    // HTMLInputElement.min => string, reflected attribute\n    // HTMLInputElement.max => string, reflected attribute\n    // HTMLInputElement.defaultValue => string, reflected attribute\n    // HTMLInputElement.dirname => string, reflected attribute\n    // HTMLInputElement.multiple => boolean, reflected attribute\n    // HTMLInputElement.step => string, reflected attribute\n    // HTMLInputElement.autocapitalize => string, reflected attribute\n\n    reflectProperties([{\n      formAction: ['']\n    }, {\n      formEncType: ['']\n    }, {\n      formMethod: ['']\n    }, {\n      formTarget: ['']\n    }, {\n      name: ['']\n    }, {\n      type: ['text']\n    }, {\n      disabled: [false]\n    }, {\n      autofocus: [false]\n    }, {\n      required: [false]\n    }, {\n      defaultChecked: [false, 'checked']\n    }, {\n      alt: ['']\n    }, {\n      height: [0]\n    }, {\n      src: ['']\n    }, {\n      width: [0]\n    }, {\n      accept: ['']\n    }, {\n      autocomplete: ['']\n    }, {\n      maxLength: [0]\n    }, {\n      size: [0]\n    }, {\n      pattern: ['']\n    }, {\n      placeholder: ['']\n    }, {\n      readOnly: [false]\n    }, {\n      min: ['']\n    }, {\n      max: ['']\n    }, {\n      defaultValue: ['', 'value']\n    }, {\n      dirName: ['']\n    }, {\n      multiple: [false]\n    }, {\n      step: ['']\n    }, {\n      autocapitalize: ['']\n    }], HTMLInputElement); // TODO(KB) Not Reflected Properties\n    // HTMLInputElement.value => string\n    // HTMLInputElement.checked\t=> boolean\n    // HTMLInputElement.indeterminate => boolean\n    // Unimplemented Properties\n    // HTMLInputElement.formNoValidate => string, reflected attribute\n    // HTMLInputElement.validity => ValidityState, readonly\n    // HTMLInputElement.validationMessage => string, readonly\n    // HTMLInputElement.willValidate => boolean, readonly\n    // HTMLInputElement.allowdirs => boolean\n    // HTMLInputElement.files\t=> Array<File>\n    // HTMLInputElement.webkitdirectory\t=> boolean, reflected attribute\n    // HTMLInputElement.webkitEntries => Array<FileSystemEntry>\n    // HTMLInputElement.selectionStart => number\n    // HTMLInputElement.selectionEnd => number\n    // HTMLInputElement.selectionDirection => string\n    // HTMLInputElement.list => Element, read only (element pointed by list attribute)\n    // HTMLInputElement.valueAsDate => Date\n    // HTMLInputElement.valueAsNumber => number\n    // Unimplemented Methods\n    // HTMLInputElement.setSelectionRange()\n    // HTMLInputElement.setRangeText()\n    // HTMLInputElement.setCustomValidity()\n    // HTMLInputElement.checkValidity()\n    // HTMLInputElement.stepDown()\n    // HTMLInputElement.stepUp()\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    class HTMLLabelElement extends HTMLElement {\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control\n       * @return input element\n       */\n      get control() {\n        const htmlFor = this.getAttribute('for');\n\n        if (htmlFor !== null) {\n          return this.ownerDocument && this.ownerDocument.getElementById(htmlFor);\n        }\n\n        return matchChildElement(this, tagNameConditionPredicate(['input']));\n      }\n\n    }\n    registerSubclass('label', HTMLLabelElement); // Reflected Properties\n    // HTMLLabelElement.htmlFor => string, reflected attribute 'for'\n\n    reflectProperties([{\n      htmlFor: ['', 'for']\n    }], HTMLLabelElement);\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    class HTMLLinkElement extends HTMLElement {\n      constructor() {\n        super(...arguments);\n        this.relList = new DOMTokenList(HTMLLinkElement, this, 'rel', 'relList', 'rel');\n      }\n\n    }\n    registerSubclass('link', HTMLLinkElement); // Reflected Properties\n    // HTMLLinkElement.as => string, reflected attribute\n    // HTMLLinkElement.crossOrigin => string, reflected attribute\n    // HTMLLinkElement.disabled => boolean, reflected attribute\n    // HTMLLinkElement.href => string, reflected attribute\n    // HTMLLinkElement.hreflang => string, reflected attribute\n    // HTMLLinkElement.media => string, reflected attribute\n    // HTMLLinkElement.referrerPolicy => string, reflected attribute\n    // HTMLLinkElement.sizes => string, reflected attribute\n    // HTMLLinkElement.type => string, reflected attribute\n\n    reflectProperties([{\n      as: ['']\n    }, {\n      crossOrigin: ['']\n    }, {\n      disabled: [false]\n    }, {\n      href: ['']\n    }, {\n      hreflang: ['']\n    }, {\n      media: ['']\n    }, {\n      referrerPolicy: ['']\n    }, {\n      sizes: ['']\n    }, {\n      type: ['']\n    }], HTMLLinkElement); // Unimplemented Properties\n    // LinkStyle.sheet Read only\n    // Returns the StyleSheet object associated with the given element, or null if there is none.\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    class HTMLMapElement extends HTMLElement {\n      /**\n       * Getter returning area elements associated to this map.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement\n       * @return area elements associated to this map.\n       */\n      get areas() {\n        return matchChildrenElements(this, element => element.tagName === 'area');\n      }\n\n    }\n    registerSubclass('link', HTMLMapElement); // Reflected Properties\n    // HTMLMapElement.name => string, reflected attribute\n\n    reflectProperties([{\n      name: ['']\n    }], HTMLMapElement);\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    class HTMLMeterElement extends HTMLElement {}\n    registerSubclass('meter', HTMLMeterElement);\n    HTMLInputLabelsMixin(HTMLMeterElement); // Reflected Properties\n    // HTMLMeterElement.high => number, reflected attribute\n    // HTMLMeterElement.low => number, reflected attribute\n    // HTMLMeterElement.max => number, reflected attribute\n    // HTMLMeterElement.min => number, reflected attribute\n    // HTMLMeterElement.optimum => number, reflected attribute\n    // HTMLMeterElement.value => number, reflected attribute\n\n    reflectProperties([{\n      high: [0]\n    }, {\n      low: [0]\n    }, {\n      max: [1]\n    }, {\n      min: [0]\n    }, {\n      optimum: [0]\n    }, {\n      value: [0]\n    }], HTMLMeterElement);\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    class HTMLModElement extends HTMLElement {}\n    registerSubclass('del', HTMLModElement);\n    registerSubclass('ins', HTMLModElement); // Reflected Properties\n    // HTMLModElement.cite => string, reflected attribute\n    // HTMLModElement.datetime => string, reflected attribute\n\n    reflectProperties([{\n      cite: ['']\n    }, {\n      datetime: ['']\n    }], HTMLModElement);\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    class HTMLOListElement extends HTMLElement {}\n    registerSubclass('ol', HTMLOListElement); // Reflected Properties\n    // HTMLModElement.reversed => boolean, reflected attribute\n    // HTMLModElement.start => number, reflected attribute\n    // HTMLOListElement.type => string, reflected attribute\n\n    reflectProperties([{\n      reversed: [false]\n    }, {\n      start: [1]\n    }, {\n      type: ['']\n    }], HTMLOListElement);\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    class HTMLOptionElement extends HTMLElement {\n      constructor(nodeType, nodeName, namespaceURI) {\n        super(nodeType, nodeName, namespaceURI);\n        this.isSelected = false;\n        this.propertyBackedAttributes_.selected = [() => String(this.isSelected), value => this.selected = value === 'true'];\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement\n       * @return position of the option within the list of options it's within, or zero if there is no valid parent.\n       */\n\n\n      get index() {\n        return this.parentNode && this.parentNode.children.indexOf(this) || 0;\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement\n       * @return label attribute value or text content if there is no attribute.\n       */\n\n\n      get label() {\n        return this.getAttribute('label') || this.textContent;\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement\n       * @param label new label value to store as an attribute.\n       */\n\n\n      set label(label) {\n        this.setAttribute('label', label);\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement\n       * @return boolean based on if the option element is selected.\n       */\n\n\n      get selected() {\n        return this.isSelected;\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement\n       * @param value new selected boolean value.\n       */\n\n\n      set selected(value) {\n        this.isSelected = value; // TODO(KB) This is a mutation.\n      }\n      /**\n       * A Synonym for the Node.textContent property getter.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement\n       * @return value of text node direct child of this Element.\n       */\n\n\n      get text() {\n        return this.textContent;\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement\n       * @param text new text content to store for this Element.\n       */\n\n\n      set text(text) {\n        this.textContent = text;\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement\n       * @return value attribute value or text content if there is no attribute.\n       */\n\n\n      get value() {\n        return this.getAttribute('value') || this.textContent;\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement\n       * @param value new value for an option element.\n       */\n\n\n      set value(value) {\n        this.setAttribute('value', value);\n      }\n\n    }\n    registerSubclass('option', HTMLOptionElement); // Reflected Properties\n    // HTMLOptionElement.defaultSelected => boolean, reflected attribute\n    // HTMLOptionElement.disabled => boolean, reflected attribute\n    // HTMLOptionElement.type => string, reflected attribute\n\n    reflectProperties([{\n      defaultSelected: [false, 'selected']\n    }, {\n      disabled: [false]\n    }, {\n      type: ['']\n    }], HTMLOptionElement); // Implemented at HTMLElement\n    // HTMLOptionElement.form, Read only\t=> HTMLFormElement\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    class HTMLProgressElement extends HTMLElement {\n      constructor() {\n        super(...arguments);\n        this._indeterminate = true;\n        this._value = 0;\n      }\n\n      get position() {\n        return this._indeterminate ? -1 : this._value / this.max;\n      }\n\n      get value() {\n        return this._value;\n      }\n\n      set value(value) {\n        this._indeterminate = false;\n        this._value = value; // TODO(KB) This is a property mutation needing tracked.\n      }\n\n    }\n    registerSubclass('progress', HTMLProgressElement);\n    HTMLInputLabelsMixin(HTMLProgressElement); // Reflected Properties\n    // HTMLModElement.max => number, reflected attribute\n\n    reflectProperties([{\n      max: [1]\n    }], HTMLProgressElement);\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    class HTMLQuoteElement extends HTMLElement {}\n    registerSubclass('blockquote', HTMLQuoteElement);\n    registerSubclass('q', HTMLQuoteElement); // Reflected Properties\n    // HTMLModElement.cite => string, reflected attribute\n\n    reflectProperties([{\n      cite: ['']\n    }], HTMLQuoteElement);\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    class HTMLScriptElement extends HTMLElement {\n      /**\n       * A Synonym for the Node.textContent property getter.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement\n       * @return value of text node direct child of this Element.\n       */\n      get text() {\n        return this.textContent;\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement\n       * @param text new text content to store for this Element.\n       */\n\n\n      set text(text) {\n        this.textContent = text;\n      }\n\n    }\n    registerSubclass('script', HTMLScriptElement); // Reflected Properties\n    // HTMLScriptElement.type => string, reflected attribute\n    // HTMLScriptElement.src => string, reflected attribute\n    // HTMLScriptElement.charset => string, reflected attribute\n    // HTMLScriptElement.async => boolean, reflected attribute\n    // HTMLScriptElement.defer => boolean, reflected attribute\n    // HTMLScriptElement.crossOrigin => string, reflected attribute\n    // HTMLScriptElement.noModule => boolean, reflected attribute\n\n    reflectProperties([{\n      type: ['']\n    }, {\n      src: ['']\n    }, {\n      charset: ['']\n    }, {\n      async: [false]\n    }, {\n      defer: [false]\n    }, {\n      crossOrigin: ['']\n    }, {\n      noModule: [false]\n    }], HTMLScriptElement);\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    const isOptionPredicate = tagNameConditionPredicate(['option']);\n\n    const isSelectedOptionPredicate = element => element.tagName === 'option' && element.selected;\n\n    class HTMLSelectElement extends HTMLElement {\n      constructor() {\n        super(...arguments);\n        this._size_ = -1\n        /* UNMODIFIED */\n        ;\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/length\n       * @return number of controls in the form\n       */\n\n\n      get length() {\n        return matchChildrenElements(this, isOptionPredicate).length;\n      }\n      /**\n       * Getter returning option elements that are direct children of a HTMLSelectElement\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement\n       * @return Element \"options\" objects that are direct children.\n       */\n\n\n      get options() {\n        return this.children.filter(isOptionPredicate);\n      }\n      /**\n       * Getter returning the index of the first selected <option> element.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/selectedIndex\n       * @return the index of the first selected option element, or -1 if no element is selected.\n       */\n\n\n      get selectedIndex() {\n        const firstSelectedChild = matchChildElement(this, isSelectedOptionPredicate);\n        return firstSelectedChild ? this.children.indexOf(firstSelectedChild) : -1;\n      }\n      /**\n       * Setter making the <option> element at the passed index selected.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/selectedIndex\n       * @param selectedIndex index number to make selected.\n       */\n\n\n      set selectedIndex(selectedIndex) {\n        this.children.forEach((element, index) => {\n          element.selected = index === selectedIndex;\n        });\n      }\n      /**\n       * Getter returning the <option> elements selected.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/selectedOptions\n       * @return array of Elements currently selected.\n       */\n\n\n      get selectedOptions() {\n        return matchChildrenElements(this, isSelectedOptionPredicate);\n      }\n      /**\n       * Getter returning the size of the select element (by default 1 for single and 4 for multiple)\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement\n       * @return size of the select element.\n       */\n\n\n      get size() {\n        return this._size_ === -1\n        /* UNMODIFIED */\n        ? this.multiple ? 4\n        /* MULTIPLE */\n        : 1\n        /* SINGLE */\n        : this._size_;\n      }\n      /**\n       * Override the size of this element (each positive unit is the height of a single option)\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement\n       * @param size number to set the size to.\n       */\n\n\n      set size(size) {\n        this._size_ = size > 0 ? size : this.multiple ? 4\n        /* MULTIPLE */\n        : 1\n        /* SINGLE */\n        ;\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement\n       * @return string representing the select element type.\n       */\n\n\n      get type() {\n        return this.multiple ? \"select-one\"\n        /* MULTIPLE */\n        : \"select-multiple\"\n        /* SINGLE */\n        ;\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement\n       * @return the value of the first selected option\n       */\n\n\n      get value() {\n        const firstSelectedChild = matchChildElement(this, isSelectedOptionPredicate);\n        return firstSelectedChild ? firstSelectedChild.value : '';\n      }\n\n    }\n    registerSubclass('select', HTMLSelectElement);\n    HTMLInputLabelsMixin(HTMLSelectElement); // Reflected Properties\n    // HTMLSelectElement.multiple => boolean, reflected attribute\n    // HTMLSelectElement.name => string, reflected attribute\n    // HTMLSelectElement.required => boolean, reflected attribute\n\n    reflectProperties([{\n      multiple: [false]\n    }, {\n      name: ['']\n    }, {\n      required: [false]\n    }], HTMLSelectElement); // Implemented on HTMLElement\n    // HTMLSelectElement.form => HTMLFormElement, readonly\n    // Unimplemented Properties\n    // HTMLSelectElement.validation => string\n    // HTMLSelectElement.validity => ValidityState\n    // HTMLSelectElement.willValidate => boolean\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    class HTMLSourceElement extends HTMLElement {}\n    registerSubclass('source', HTMLSourceElement); // Reflected Properties\n    // HTMLSourceElement.media => string, reflected attribute\n    // HTMLSourceElement.sizes => string, reflected attribute\n    // HTMLSourceElement.src => string, reflected attribute\n    // HTMLSourceElement.srcset => string, reflected attribute\n    // HTMLSourceElement.type => string, reflected attribute\n\n    reflectProperties([{\n      media: ['']\n    }, {\n      sizes: ['']\n    }, {\n      src: ['']\n    }, {\n      srcset: ['']\n    }, {\n      type: ['']\n    }], HTMLSourceElement); // Unimplemented Properties\n    // HTMLSourceElement.keySystem => string\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    class HTMLStyleElement extends HTMLElement {}\n    registerSubclass('style', HTMLStyleElement); // Reflected Properties\n    // HTMLStyleElement.media => string, reflected attribute\n    // HTMLStyleElement.type => string, reflected attribute\n\n    reflectProperties([{\n      media: ['']\n    }, {\n      type: ['']\n    }], HTMLStyleElement); // Unimplemented Properties\n    // HTMLStyleElement.disabled => boolean\n    // HTMLStyleElement.scoped => boolean, reflected attribute\n    // HTMLStyleElement.sheet => StyleSheet, read only\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    class HTMLTableCellElement extends HTMLElement {\n      constructor() {\n        super(...arguments);\n        this.headers = new DOMTokenList(HTMLTableCellElement, this, 'headers', null, null);\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement\n       * @return position of the cell within the parent tr, if not nested in a tr the value is -1.\n       */\n\n\n      get cellIndex() {\n        const parent = matchNearestParent(this, tagNameConditionPredicate(['tr']));\n        return parent !== null ? matchChildrenElements(parent, tagNameConditionPredicate(['th', 'td'])).indexOf(this) : -1;\n      }\n\n    }\n    registerSubclass('th', HTMLTableCellElement);\n    registerSubclass('td', HTMLTableCellElement); // Reflected Properties\n    // HTMLTableCellElement.abbr => string, reflected attribute\n    // HTMLTableCellElement.colSpan => number, reflected attribute\n    // HTMLTableCellElement.rowSpan => number, reflected attribute\n    // HTMLTableCellElement.scope => string, reflected attribute\n\n    reflectProperties([{\n      abbr: ['']\n    }, {\n      colSpan: [1]\n    }, {\n      rowSpan: [1]\n    }, {\n      scope: ['']\n    }], HTMLTableCellElement);\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    class HTMLTableColElement extends HTMLElement {}\n    registerSubclass('col', HTMLTableColElement); // Reflected Properties\n    // HTMLTableColElement.span => number, reflected attribute\n\n    reflectProperties([{\n      span: [1]\n    }], HTMLTableColElement);\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n\n    const removeElement = element => element && element.remove();\n\n    const insertBeforeElementsWithTagName = (parent, element, tagNames) => {\n      const insertBeforeElement = matchChildElement(parent, element => !tagNames.includes(element.tagName));\n\n      if (insertBeforeElement) {\n        parent.insertBefore(element, insertBeforeElement);\n      } else {\n        parent.appendChild(element);\n      }\n    };\n\n    class HTMLTableElement extends HTMLElement {\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/caption\n       * @return first matching caption Element or null if none exists.\n       */\n      get caption() {\n        return matchChildElement(this, tagNameConditionPredicate(['caption']));\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/caption\n       * @param element new caption element to replace the existing, or become the first element child.\n       */\n\n\n      set caption(newElement) {\n        if (newElement && newElement.tagName === 'caption') {\n          // If a correct object is given,\n          // it is inserted in the tree as the first child of this element and the first <caption>\n          // that is a child of this element is removed from the tree, if any.\n          removeElement(this.caption);\n          this.insertBefore(newElement, this.firstElementChild);\n        }\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/tHead\n       * @return first matching thead Element or null if none exists.\n       */\n\n\n      get tHead() {\n        return matchChildElement(this, tagNameConditionPredicate(['thead']));\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/tHead\n       * @param newElement new thead element to insert in this table.\n       */\n\n\n      set tHead(newElement) {\n        if (newElement && newElement.tagName === 'thead') {\n          // If a correct object is given,\n          // it is inserted in the tree immediately before the first element that is\n          // neither a <caption>, nor a <colgroup>, or as the last child if there is no such element.\n          // Additionally, the first <thead> that is a child of this element is removed from the tree, if any.\n          removeElement(this.tHead);\n          insertBeforeElementsWithTagName(this, newElement, ['caption', 'colgroup']);\n        }\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/tHead\n       * @return first matching thead Element or null if none exists.\n       */\n\n\n      get tFoot() {\n        return matchChildElement(this, tagNameConditionPredicate(['tfoot']));\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/tHead\n       * @param newElement new tfoot element to insert in this table.\n       */\n\n\n      set tFoot(newElement) {\n        if (newElement && newElement.tagName === 'tfoot') {\n          // If a correct object is given,\n          // it is inserted in the tree immediately before the first element that is neither a <caption>,\n          // a <colgroup>, nor a <thead>, or as the last child if there is no such element, and the first <tfoot> that is a child of\n          // this element is removed from the tree, if any.\n          removeElement(this.tFoot);\n          insertBeforeElementsWithTagName(this, newElement, ['caption', 'colgroup', 'thead']);\n        }\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement\n       * @return array of 'tr' tagname elements\n       */\n\n\n      get rows() {\n        return matchChildrenElements(this, tagNameConditionPredicate(['tr']));\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement\n       * @return array of 'tbody' tagname elements\n       */\n\n\n      get tBodies() {\n        return matchChildrenElements(this, tagNameConditionPredicate(['tbody']));\n      }\n\n    }\n    registerSubclass('table', HTMLTableElement); // Unimplemented Properties\n    // HTMLTableElement.sortable => boolean\n    // Unimplemented Methods\n    // HTMLTableElement.createTHead()\n    // HTMLTableElement.deleteTHead()\n    // HTMLTableElement.createTFoot()\n    // HTMLTableElement.deleteTFoot()\n    // HTMLTableElement.createCaption()\n    // HTMLTableElement.deleteCaption()\n    // HTMLTableElement.insertRow()\n    // HTMLTableElement.deleteRow()\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    const TABLE_SECTION_TAGNAMES = 'table tbody thead tfoot'.split(' ');\n\n    const indexInAncestor = (element, isValidAncestor) => {\n      const parent = matchNearestParent(element, isValidAncestor); // TODO(KB): This is either a HTMLTableElement or HTMLTableSectionElement.\n\n      return parent === null ? -1 : parent.rows.indexOf(element);\n    };\n\n    class HTMLTableRowElement extends HTMLElement {\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement\n       * @return td and th elements that are children of this row.\n       */\n      get cells() {\n        return matchChildrenElements(this, tagNameConditionPredicate(['td', 'th']));\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement\n       * @return position of the row within a table, if not nested within in a table the value is -1.\n       */\n\n\n      get rowIndex() {\n        return indexInAncestor(this, tagNameConditionPredicate(['table']));\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement\n       * @return position of the row within a parent section, if not nested directly in a section the value is -1.\n       */\n\n\n      get sectionRowIndex() {\n        return indexInAncestor(this, tagNameConditionPredicate(TABLE_SECTION_TAGNAMES));\n      }\n      /**\n       * Removes the cell in provided position of this row.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement\n       * @param index position of the cell in the row to remove.\n       */\n\n\n      deleteCell(index) {\n        const cell = this.cells[index];\n        cell && cell.remove();\n      }\n      /**\n       * Insert a new cell ('td') in the row at a specified position.\n       * @param index position in the children to insert before.\n       * @return newly inserted td element.\n       */\n\n\n      insertCell(index) {\n        const cells = this.cells;\n        const td = this.ownerDocument.createElement('td');\n\n        if (index < 0 || index >= cells.length) {\n          this.appendChild(td);\n        } else {\n          this.insertBefore(td, this.children[index]);\n        }\n\n        return td;\n      }\n\n    }\n    registerSubclass('tr', HTMLTableRowElement);\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    class HTMLTableSectionElement extends HTMLElement {\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement\n       * @return All rows (tr elements) within the table section.\n       */\n      get rows() {\n        return matchChildrenElements(this, tagNameConditionPredicate(['tr']));\n      }\n      /**\n       * Remove a node in a specified position from the section.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement\n       * @param index position in the section to remove the node of.\n       */\n\n\n      deleteRow(index) {\n        const rows = this.rows;\n\n        if (index >= 0 || index <= rows.length) {\n          rows[index].remove();\n        }\n      }\n      /**\n       * Insert a new row ('tr') in the row at a specified position.\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement\n       * @param index position in the children to insert before.\n       * @return newly inserted tr element.\n       */\n\n\n      insertRow(index) {\n        const rows = this.rows;\n        const tr = this.ownerDocument.createElement('tr');\n\n        if (index < 0 || index >= rows.length) {\n          this.appendChild(tr);\n        } else {\n          this.insertBefore(tr, this.children[index]);\n        }\n\n        return tr;\n      }\n\n    }\n    registerSubclass('thead', HTMLTableSectionElement);\n    registerSubclass('tfoot', HTMLTableSectionElement);\n    registerSubclass('tbody', HTMLTableSectionElement);\n\n    // <blockquote> and <q>\n    class HTMLTimeElement extends HTMLElement {}\n    registerSubclass('time', HTMLTimeElement); // Reflected Properties\n    // HTMLTimeElement.dateTime => string, reflected attribute\n\n    reflectProperties([{\n      dateTime: ['']\n    }], HTMLTimeElement);\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    class SVGElement extends Element {}\n    registerSubclass('svg', SVGElement);\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    class Event {\n      constructor(type, opts) {\n        this._stop = false;\n        this._end = false;\n        this.type = type;\n        this.bubbles = !!opts.bubbles;\n        this.cancelable = !!opts.cancelable;\n      }\n\n      stopPropagation() {\n        this._stop = true;\n      }\n\n      stopImmediatePropagation() {\n        this._end = this._stop = true;\n      }\n\n      preventDefault() {\n        this.defaultPrevented = true;\n      }\n\n    }\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    let document;\n    let observing = false;\n    let hydrated = false;\n\n    const serializeNodes = nodes => nodes.map(node => node._transferredFormat_);\n    /**\n     *\n     * @param mutations\n     */\n\n\n    function serializeHydration(mutations) {\n      consume();\n      const hydratedNode = document.body.hydrate();\n      const events = [];\n      mutations.forEach(mutation => {\n        if (mutation.type === 4\n        /* COMMAND */\n        && mutation.addedEvents) {\n          mutation.addedEvents.forEach(addEvent => {\n            events.push(addEvent);\n          });\n        }\n      });\n      return {\n        [9\n        /* type */\n        ]: 2\n        /* HYDRATE */\n        ,\n        [39\n        /* strings */\n        ]: consume$1(),\n        [35\n        /* nodes */\n        ]: hydratedNode,\n        [20\n        /* addedEvents */\n        ]: events\n      };\n    }\n    /**\n     *\n     * @param mutations\n     */\n\n\n    function serializeMutations(mutations) {\n      const nodes = consume().map(node => node._creationFormat_);\n      const transferrableMutations = [];\n      mutations.forEach(mutation => {\n        let transferable = {\n          [9\n          /* type */\n          ]: mutation.type,\n          [10\n          /* target */\n          ]: mutation.target._index_\n        };\n        mutation.addedNodes && (transferable[11\n        /* addedNodes */\n        ] = serializeNodes(mutation.addedNodes));\n        mutation.removedNodes && (transferable[12\n        /* removedNodes */\n        ] = serializeNodes(mutation.removedNodes));\n        mutation.nextSibling && (transferable[14\n        /* nextSibling */\n        ] = mutation.nextSibling._transferredFormat_);\n        mutation.attributeName != null && (transferable[15\n        /* attributeName */\n        ] = store$1(mutation.attributeName));\n        mutation.attributeNamespace != null && (transferable[16\n        /* attributeNamespace */\n        ] = store$1(mutation.attributeNamespace));\n        mutation.oldValue != null && (transferable[19\n        /* oldValue */\n        ] = store$1(mutation.oldValue));\n        mutation.propertyName && (transferable[17\n        /* propertyName */\n        ] = store$1(mutation.propertyName));\n        mutation.value != null && (transferable[18\n        /* value */\n        ] = store$1(mutation.value));\n        mutation.addedEvents && (transferable[20\n        /* addedEvents */\n        ] = mutation.addedEvents);\n        mutation.removedEvents && (transferable[21\n        /* removedEvents */\n        ] = mutation.removedEvents);\n        transferrableMutations.push(transferable);\n      });\n      return {\n        [9\n        /* type */\n        ]: 3\n        /* MUTATE */\n        ,\n        [39\n        /* strings */\n        ]: consume$1(),\n        [35\n        /* nodes */\n        ]: nodes,\n        [34\n        /* mutations */\n        ]: transferrableMutations\n      };\n    }\n    /**\n     *\n     * @param incoming\n     * @param postMessage\n     */\n\n\n    function handleMutations(incoming, postMessage) {\n      if (postMessage) {\n        postMessage(hydrated === false ? serializeHydration(incoming) : serializeMutations(incoming));\n      }\n\n      hydrated = true;\n    }\n    /**\n     *\n     * @param doc\n     * @param postMessage\n     */\n\n\n    function observe(doc, postMessage) {\n      if (!observing) {\n        document = doc;\n        new doc.defaultView.MutationObserver(mutations => handleMutations(mutations, postMessage)).observe(doc.body);\n        observing = true;\n      } else {\n        console.error('observe() was called more than once.');\n      }\n    }\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * When an event is dispatched from the main thread, it needs to be propagated in the worker thread.\n     * Propagate adds an event listener to the worker global scope and uses the WorkerDOM Node.dispatchEvent\n     * method to dispatch the transfered event in the worker thread.\n     */\n\n    function propagate$1() {\n      if (typeof addEventListener !== 'undefined') {\n        addEventListener('message', ({\n          data\n        }) => {\n          if (data[9\n          /* type */\n          ] !== 1\n          /* EVENT */\n          ) {\n              return;\n            }\n\n          const event = data[37\n          /* event */\n          ];\n          const node = get(event[7\n          /* _index_ */\n          ]);\n\n          if (node !== null) {\n            const target = event[10\n            /* target */\n            ];\n            node.dispatchEvent(Object.assign(new Event(event[9\n            /* type */\n            ], {\n              bubbles: event[22\n              /* bubbles */\n              ],\n              cancelable: event[23\n              /* cancelable */\n              ]\n            }), {\n              cancelBubble: event[24\n              /* cancelBubble */\n              ],\n              defaultPrevented: event[26\n              /* defaultPrevented */\n              ],\n              eventPhase: event[27\n              /* eventPhase */\n              ],\n              isTrusted: event[28\n              /* isTrusted */\n              ],\n              returnValue: event[29\n              /* returnValue */\n              ],\n              target: get(target ? target[7\n              /* _index_ */\n              ] : null),\n              timeStamp: event[30\n              /* timeStamp */\n              ],\n              scoped: event[31\n              /* scoped */\n              ],\n              keyCode: event[32\n              /* keyCode */\n              ]\n            }));\n          }\n        });\n      }\n    }\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    /**\n     * When an event is dispatched from the main thread, it needs to be propagated in the worker thread.\n     * Propagate adds an event listener to the worker global scope and uses the WorkerDOM Node.dispatchEvent\n     * method to dispatch the transfered event in the worker thread.\n     */\n\n    function propagate$2() {\n      if (typeof addEventListener !== 'function') {\n        return;\n      }\n\n      addEventListener('message', ({\n        data\n      }) => {\n        if (data[9\n        /* type */\n        ] !== 5\n        /* SYNC */\n        ) {\n            return;\n          }\n\n        const sync = data[38\n        /* sync */\n        ];\n        const node = get(sync[7\n        /* _index_ */\n        ]);\n\n        if (node) {\n          node.value = sync[18\n          /* value */\n          ];\n        }\n      });\n    }\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    class Document extends Element {\n      constructor() {\n        super(9\n        /* DOCUMENT_NODE */\n        , '#document', null);\n        this.documentElement = this;\n\n        this.createElement = tagName => this.createElementNS(null, tagName);\n\n        this.createElementNS = (namespaceURI, tagName) => new (NODE_NAME_MAPPING[tagName] || HTMLElement)(1\n        /* ELEMENT_NODE */\n        , tagName, namespaceURI);\n\n        this.createTextNode = text => new Text(text);\n\n        this.defaultView = {\n          document: this,\n          MutationObserver,\n          Document,\n          Node,\n          Text,\n          Element,\n          SVGElement,\n          Event\n        };\n      }\n      /**\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById\n       * @return Element with matching id attribute.\n       */\n\n\n      getElementById(id) {\n        return matchChildElement(this.body, element => element.id === id);\n      }\n\n    }\n    /**\n     *\n     * @param postMessageMethod\n     */\n\n    function createDocument(postMessageMethod) {\n      // Use local references of privileged functions that are used asynchronously\n      // (e.g. `postMessage`) to prevent overwriting by 3P JS.\n      const _postMessage = postMessageMethod;\n      const doc = new Document();\n      doc.isConnected = true;\n      doc.appendChild(doc.body = doc.createElement('body'));\n\n      if (_postMessage) {\n        observe(doc, _postMessage);\n        propagate$1();\n        propagate$2();\n      }\n\n      return doc;\n    }\n    /** Should only be used for testing. */\n\n    const documentForTesting = undefined;\n\n    /**\n     * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS-IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n    const doc = createDocument(self.postMessage);\n    const workerDOM = {\n      document: doc,\n      addEventListener: doc.addEventListener.bind(doc),\n      removeEventListener: doc.removeEventListener.bind(doc),\n      localStorage: {},\n      location: {},\n      url: '/',\n      appendKeys\n    };\n\n    exports.workerDOM = workerDOM;\n\n    return exports;\n\n}({}));\n//# sourceMappingURL=worker.mjs.map\n\n\n//# sourceURL=webpack://worker-dom-mfe/./node_modules/worker-dom/dist/worker.mjs?");

/***/ }),

/***/ "./src/worker.mjs":
/*!************************!*\
  !*** ./src/worker.mjs ***!
  \************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var worker_dom_dist_worker_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! worker-dom/dist/worker.mjs */ \"./node_modules/worker-dom/dist/worker.mjs\");\n\r\nmodule.exports = worker_dom_dist_worker_mjs__WEBPACK_IMPORTED_MODULE_0__;\n\n//# sourceURL=webpack://worker-dom-mfe/./src/worker.mjs?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/worker.mjs");
/******/ 	
/******/ })()
;